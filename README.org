#+TITLE: Manu's Emacs Configuration
#+AUTHOR: Manu Goyal
#+EMAIL: manu.goyal2013@gmail.com
#+OPTIONS: num:nil ^:nil

This file includes custom settings for various Emacs features and makes use of
numerous third-party packages to add functionality to Emacs. Although this file
contains most of the important customization, there is some initial set-up in
[[file:init.el][init.el]], and some additional package-specific variable settings in [[file:custom.el][custom.el]].

* General
  Here we have general editing and system settings.
** Bind Key
   We use the bind-key package, which provides useful functions for
   creating personal keybindings
   #+begin_src emacs-lisp
     (use-package bind-key
       :ensure t)
   #+end_src
** VC
   Disable version control when we're in TRAMP
   #+begin_src emacs-lisp
     (setq vc-ignore-dir-regexp
           (format "\\(%s\\)\\|\\(%s\\)"
                   vc-ignore-dir-regexp
                   tramp-file-name-regexp))

   #+end_src
** Mac OSX Key Bindings
   We set the command key to meta and the alt key to super
   #+begin_src emacs-lisp
     (setq ns-alternate-modifier 'super)
     (setq ns-command-modifier 'meta)
   #+end_src
** TRAMP
   There are a lot of settings we want to enable only if we are or are not
   visiting a TRAMP file, so we provide a helper method to check if we're in a
   tramp file.
   #+begin_src emacs-lisp
     (defun is-current-file-tramp ()
       (tramp-tramp-file-p (buffer-file-name (current-buffer))))
   #+end_src
** File Backups
   We store backups in a temporary folder.
   #+begin_src emacs-lisp
     ;; Backup file settings
     (setq
        backup-by-copying t      ; don't clobber symlinks
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups
     ;; Save by default in ~/.saves folder
     (push (cons "." "~/.saves") backup-directory-alist)
     ;; Disable backups whenever we're in tramp
     (use-package tramp
       :config
       (add-hook
        'find-file-hook
        (lambda () (if (is-current-file-tramp) (setq-local make-backup-files nil))))
       )
   #+end_src
** File Position Persistence
   We save the cursor position at visited files in between sessions, except if
   we're in a TRAMP buffer.
   #+begin_src emacs-lisp
     (use-package saveplace
       :ensure t
       :init
       (progn
         (setq-default save-place t)
         (setq save-place-file "~/.emacs.d/.saved-places")
         )
       :config
       (setq save-place-ignore-files-regexp
             (format "\\(%s\\)\\|\\(%s\\)"
                     save-place-ignore-files-regexp
                     tramp-file-name-regexp))
       )
   #+end_src
** camelCase Navigation
   We want to navigate camelCase words as separate words.
   #+begin_src emacs-lisp
     (use-package subword
       :diminish subword-mode
       :init
       (global-subword-mode)
     )
   #+end_src
** Parentheses
   Most of the automatic parentheses management libraries in emacs are either
   overkill or buggy, so we just add a bare minimum few key-bindings and
   settings
   #+begin_src emacs-lisp
     ;; Add a key-binding to delete matching pairs
     (bind-key "M-D" 'delete-pair)
     ;; Show matching parentheses
     (add-hook 'prog-mode-hook 'show-paren-mode)
   #+end_src
** Jumping Around Buffers
   We use ace-jump mode, which highlights all occurences of a
   character you enter in the current buffer and lets you immediately
   jump to the place you want.
   #+begin_src emacs-lisp
     (use-package ace-jump-mode
       :ensure t
       :demand
       :bind ("C-c c" . ace-jump-char-mode))
   #+end_src
** Multiple Cursors
   We use the multiple-cursors package, which provides multiple cursors editing
   similar to what you would find in SublimeText.
   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C-S-C C-S-C" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-=" . mc/mark-all-like-this-dwim))
       )
   #+end_src
** Completion in an ELISP Minibffer
   #+begin_src emacs-lisp
     (bind-key "TAB" 'completion-at-point read-expression-map)
   #+end_src
** Spell Checking
   We use flyspell.
   #+begin_src emacs-lisp
     (use-package flyspell
       :ensure t
       :defer t
       :init
       (progn
         (add-hook 'prog-mode-hook 'flyspell-prog-mode)
         (add-hook 'text-mode-hook 'flyspell-mode)
         )
       :config
       ;; Sets flyspell correction to use two-finger mouse click
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       )
   #+end_src
** Color Scheme
   #+begin_src emacs-lisp
     (use-package solarized-theme
       :ensure t
       :init
       (load-theme 'solarized-light)
       )
   #+end_src
** Window and Frame Navigation
   We define keybindings for navigating to different windows and frames. We copy
   the windmove-default-keybindings and framemove-default-keybindings functions
   and modify them to use my-keys-minor-mode-map.
   #+begin_src emacs-lisp
     (use-package windmove
       :ensure t
       :bind (("S-<left>" . windmove-left)
              ("S-<right>" . windmove-right)
              ("S-<up>" . windmove-up)
              ("S-<down>" . windmove-down)
              )
       )

     (use-package framemove
       :ensure t
       :bind (("C-S-<left>" . fm-left-frame)
              ("C-S-<right>" . fm-right-frame)
              ("C-S-<up>" . fm-up-frame)
              ("C-S-<down>" . fm-down-frame)
              )
       )
   #+end_src
** UTF-8 Encoding
   We set everything to UTF-8 encoding.
   #+begin_src emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (setq current-language-environment "UTF-8")
     (prefer-coding-system 'utf-8)
     (setenv "LC_CTYPE" "UTF-8")
   #+end_src
** Blinking Cursor
   We don't want the cursor to blink.
   #+begin_src emacs-lisp
     (blink-cursor-mode -1)
   #+end_src
** Column numbers
   We want to see the column number we're at on each line.
   #+begin_src emacs-lisp
     (setq column-number-mode t)
   #+end_src
** Undo/Redo
   By default, emacs doesn't have an actual redo function. The way you redo an
   edit is by undoing a previous undo. This can quickly get confusing when
   you're not exactly sure how much you want to undo or redo, so we use undo
   tree, which provides an actual redo function for emacs and maintains all edit
   history by keeping a tree of undos and redos.
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode
       :init
       (global-undo-tree-mode)
       )
   #+end_src
** Turn off All Menus and Tool Bars and Whizbangs
   We don't need that stuff.
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
** No Tabs
   We disable indenting with tabs.
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src
** Navigating sentences
   We put one space after sentences, so we want emacs to recognize these
   sentences for navigation and editing.
   #+begin_src emacs-lisp
     (setq sentence-end-double-space nil)
   #+end_src
** Case-sensitivity in searches
   By default, we want case sensitivity in searches and replaces to be smart.
   That is, if your search doesn't use capital letters, emacs will ignore case.
   If it does, emacs will be case-sensitive.
   #+begin_src emacs-lisp
     (setq-default case-fold-search t)
   #+end_src
** Whitespace mode
   Turn on whitespace mode, which helps track down and clean up bad
   whitespace in code. Additional settings for whitespace mode can be
   found in custom.el.
   #+begin_src emacs-lisp
     (use-package whitespace
       :ensure t
       :diminish whitespace-mode
       :init
       (add-hook 'prog-mode-hook 'whitespace-mode)
       )
   #+end_src
** Git
   We use magit
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t
       :init
       (bind-key "C-c m" 'magit-status)
       )

     ;; For vc-git-grep
     (require 'vc-git)
   #+end_src
** Buffer menu
   We use ibuffer, which is better than the default buffer menu
   #+begin_src emacs-lisp
     (bind-key "C-x C-b" 'ibuffer)
   #+end_src
** Wgrep
   Wgrep mode turns the grep buffer into an editable buffer, so you can make
   changes to the results of a grep query and then save them across files.
   #+begin_src emacs-lisp
     (use-package wgrep
       :ensure t
       :init
       (require 'wgrep)
       )
   #+end_src
** Find file in project
   Create a binding for finding a file in a large project
   #+begin_src emacs-lisp
     ;; find-file-in-project-by-selected is better than plain old
     ;; find-file-in-project, because it lets you narrow down the list of candidates
     ;; with a keyword before giving you the interactive menu. This is much faster
     ;; than starting with the interactive menu for large projects.
     (use-package find-file-in-project
       :ensure t
       :init
       (bind-key "C-c f" 'find-file-in-project-by-selected)
       )
   #+end_src
* Languages
  Here we have programming-language-related settings
** Company mode
   Company is a generic auto-completion framework. It allows you to
   define backends that source completions from different sources, so
   you can have language-specific completions
   #+begin_src emacs-lisp
     (use-package company
       :ensure t
       :config
       (progn
         ;; Enable company mode in every programming mode
         (add-hook 'prog-mode-hook 'company-mode)
         ;; Set my own default company backends
         (setq-default
          company-backends
          '(
            company-nxml
            company-css
            company-cmake
            company-files
            company-dabbrev-code
            company-keywords
            company-dabbrev
            company-elisp
            ))
         )
       )
   #+end_src
** Real-Time Syntax Checking
   We use flycheck to check syntax and style in code. flycheck will
   run language-specific code checkers based on the file type and
   highlight problems.
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (progn
         ;; Enable flycheck mode as long as we're not in TRAMP
         (add-hook
          'prog-mode-hook
          (lambda () (if (not (is-current-file-tramp)) (flycheck-mode 1))))
         )
       )
   #+end_src
** C/C++
   Rtags provides completion and symbol navigation for specific code-bases
   #+begin_src emacs-lisp
     ;; Use rtags for navigation
     (use-package rtags
       :ensure t
       :config
       (progn
         ;; Start rtags upon entering a C/C++ file
         (add-hook
          'c-mode-common-hook
          (lambda () (if (not (is-current-file-tramp))
                         (rtags-start-process-unless-running))))
         (add-hook
          'c++-mode-common-hook
          (lambda () (if (not (is-current-file-tramp))
                         (rtags-start-process-unless-running))))
         ;; Flycheck setup
         (require 'flycheck-rtags)
         (defun my-flycheck-rtags-setup ()
           (flycheck-select-checker 'rtags)
           ;; RTags creates more accurate overlays.
           (setq-local flycheck-highlighting-mode nil)
           (setq-local flycheck-check-syntax-automatically nil))
         ;; c-mode-common-hook is also called by c++-mode
         (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
         ;; Keybindings
         (rtags-enable-standard-keybindings c-mode-base-map "\C-cr")
         )
       )
     ;; Use irony for completion
     (use-package irony
       :ensure t
       :config
       (progn
         (add-hook
          'c-mode-common-hook
          (lambda () (if (not (is-current-file-tramp)) (irony-mode))))
         (add-hook
          'c++-mode-common-hook
          (lambda () (if (not (is-current-file-tramp)) (irony-mode))))
         (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
         (use-package company-irony
           :ensure t
           :config
           (push 'company-irony company-backends)
           )
         )
       )
   #+end_src
** Python
   We use elpy
   #+begin_src emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (progn
         (elpy-enable)
         (elpy-use-ipython)
         )
       )
   #+end_src
** LaTeX
   #+begin_src emacs-lisp
     ;; Auctex
     (use-package auctex
       :ensure t
       :mode ("\\.tex\\'" . latex-mode)
       :commands (latex-mode LaTeX-mode plain-tex-mode)
       :init
       (progn
         (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
         (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
         (add-hook 'LaTeX-mode-hook #'flyspell-mode)
         (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
         (setq TeX-auto-save t
               TeX-parse-self t
               TeX-save-query nil
               TeX-PDF-mode t)
         ))

     ;; Use company-auctex
     (use-package company-auctex
       :ensure t
       :config
       (company-auctex-init)
     )
   #+end_src
** HTML/XML/Javascript
   #+begin_src emacs-lisp
     (use-package web-mode
       :ensure t
       :config
       (progn
         ;; Enable web mode in the following modes
         (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
         ;; Set the content type to "jsx" for the following file extensions
         (setq web-mode-content-types-alist
               '(("jsx" . "\\.js[x]?\\'")))
         )
       )
   #+end_src
** Go
   #+begin_src emacs-lisp
     (use-package go-mode
       :ensure t
       :mode "\\.go"
       )

     (use-package company-go
       :ensure t
       :config
       (push 'company-go company-backends)
       )
   #+end_src
** SQL
   #+begin_src emacs-lisp
     (use-package sql
       :ensure t
       :mode ("\\.sql" . sql-mode)
       )
     (setq sql-mysql-login-params (quote (user server port password)))
   #+end_src
** OCaml
    #+begin_src emacs-lisp
      (if (file-exists-p (expand-file-name "~/.opam"))
          (progn
            ;; Setup environment variables using opam
            (dolist (var (car (read-from-string
                               (shell-command-to-string "opam config env --sexp"))))
              (setenv (car var) (cadr var)))

            ;; Update the emacs path
            (setq exec-path (append (parse-colon-path (getenv "PATH"))
                                    (list exec-directory)))

            ;; Update the emacs load path
            (add-to-list 'load-path
                         (expand-file-name "../../share/emacs/site-lisp"
                                           (getenv "OCAML_TOPLEVEL_PATH")))
            ;; utop
            (use-package utop
              :ensure t
              :config
              (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
              )

            ;; ocp-indent
            (require 'ocp-indent)
            ;; merlin
            (require 'merlin)
            (add-hook 'tuareg-mode-hook 'merlin-mode t)
            (setq merlin-command 'opam)
            (push 'merlin-company-backend company-backends)
            ))

    #+end_src
** CSS
   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :init
       (add-hook 'css-mode-hook 'rainbow-mode)
       )
   #+end_src
** LaTeX
   #+begin_src emacs-lisp
     ;; Auctex
     (use-package auctex
       :ensure t
       :mode ("\\.tex\\'" . latex-mode)
       :commands (latex-mode LaTeX-mode plain-tex-mode)
       :init
       (progn
         (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
         (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
         (add-hook 'LaTeX-mode-hook #'flyspell-mode)
         (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
         (setq TeX-auto-save t
               TeX-parse-self t
               TeX-save-query nil
               TeX-PDF-mode t)
         (setq-default TeX-master nil)))

     (use-package preview
       :commands LaTeX-preview-setup
       :init
       (progn
         (setq-default
          preview-scale 1.4
          preview-scale-function
          '(lambda ()
             (* (/ 10.0 (preview-document-pt)) preview-scale)))))

     ;; Use company-auctex
     (use-package company-auctex
       :ensure t
       :config
       (company-auctex-init)
     )
   #+end_src
** Haskell
   #+begin_src emacs-lisp
     (use-package haskell-mode
       :ensure t
       :mode "\\.hs"
       :config
       (progn
         ;; Turn on haskell-mode features automatically
         (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
         (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
         (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
         (add-hook 'haskell-mode-hook 'haskell-doc-mode)
         )
       )
   #+end_src
** Bison
   #+begin_src emacs-lisp
     (use-package bison-mode
       :ensure t
       :mode "\\.y"
       )
   #+end_src
** Scala
   #+begin_src emacs-lisp
     (use-package scala-mode2
       :ensure t
       )

     (use-package ensime
       :ensure t
       :config
       (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))
   #+end_src
** Clojure
   #+begin_src emacs-lisp
     ;; Use the cider package
     (use-package cider
       :ensure t
       )
   #+end_src
** Erlang
   #+begin_src emacs-lisp
     (use-package erlang
       :ensure t
       )
   #+end_src
** YAML
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :config
       (require 'yaml-mode))
   #+end_src
** Perl6
   #+begin_src emacs-lisp
     (use-package perl6-mode
       :ensure t
       :defer t
       )
   #+end_src
